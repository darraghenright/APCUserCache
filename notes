apc_add — Cache a new variable in the data store
------------------------------------------------

1. bool apc_add ( string $key [, mixed $var [, int $ttl = 0 ]] )
2. array apc_add ( array $values [, mixed $unused [, int $ttl = 0 ]] )

* Hoolux\APC\UserCache::add(key, val, ttl)
    key needs to be a string
    key is a no-op for existing string
    value can be anything @CHECK
    ttl is an int. 0 or greater. @CHECK -1?

* Hoolux\APC\UserCache::addArray(keys, ttl)
    array of key value pairs
    need to validate this?
    or return the errors?
    ttl... same rules as above

### apc_bin_dump — Get a binary dump of the given files and user variables
### apc_bin_dumpfile — Output a binary dump of cached files and user variables to a file
### apc_bin_load — Load a binary dump into the APC file/user cache
### apc_bin_loadfile — Load a binary dump from a file into the APC file/user cache

apc_cache_info — Retrieves cached information from APC's data store
-------------------------------------------------------------------

not immediately useful

apc_cas — Updates an old value with a new value
-----------------------------------------------

compare and swap - apc_cas() updates an already existing integer value if the old parameter matches the currently stored value with the value of the new parameter

apc_clear_cache — Clears the APC cache
--------------------------------------

bool apc_clear_cache ([ string $cache_type ] )

### apc_compile_file — Stores a file in the bytecode cache, bypassing all filters.

apc_dec — Decrease a stored number


apc_define_constants — Defines a set of constants for retrieval and mass-definition
### apc_delete_file — Deletes files from the opcode cache
apc_delete — Removes a stored variable from the cache
apc_exists — Checks if APC key exists
apc_fetch — Fetch a stored variable from the cache
apc_inc — Increase a stored number
### apc_load_constants — Loads a set of constants from the cache
### apc_sma_info — Retrieves APC's Shared Memory Allocation information
apc_store — Cache a variable in the data store

Inherited

APCIterator::__construct — Constructs an APCIterator iterator object
APCIterator::current — Get current item
APCIterator::getTotalCount — Get total count
APCIterator::getTotalHits — Get total cache hits
APCIterator::getTotalSize — Get total cache size
APCIterator::key — Get iterator key
APCIterator::next — Move pointer to next item
APCIterator::rewind — Rewinds iterator
APCIterator::valid — Checks if current position is valid